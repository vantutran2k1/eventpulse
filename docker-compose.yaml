services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: eventpulse-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: eventpulse-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    hostname: schema-registry
    container_name: eventpulse-schema-registry
    depends_on:
      - kafka
    ports:
      - "28081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: eventpulse-kafka-ui
    ports:
      - "28080:8080"
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081

  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: eventpulse-spark-iceberg
    networks:
      - iceberg_net
    depends_on:
      - rest
      - minio
    volumes:
      - ./infra/spark_iceberg/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./tools/migrations:/opt/spark/tools/migrations
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
    env_file:
      - .env
    ports:
      - "18888:8888"
      - "18080:8080"
      - "10000:10000"
      - "10001:10001"

  rest:
    image: apache/iceberg-rest-fixture
    container_name: eventpulse-rest
    networks:
      - iceberg_net
    ports:
      - "8181:8181"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=${MINIO_ENDPOINT}

  minio:
    image: minio/minio
    container_name: eventpulse-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - ./infra/minio/data:/data

  mc:
    image: minio/mc
    container_name: eventpulse-mc
    depends_on:
      - minio
    networks:
      - iceberg_net
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
    entrypoint: |
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      until /usr/bin/mc alias set minio ${MINIO_ENDPOINT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}; do
        echo '...retrying MinIO connection...';
        sleep 3;
      done;
      echo 'Connected to MinIO, creating bucket if not exists...';
      /usr/bin/mc mb minio/warehouse || echo 'Bucket already exists';
      /usr/bin/mc policy set public minio/warehouse || true;
      echo 'MinIO bucket setup complete, sleeping forever';
      tail -f /dev/null
      "

networks:
  iceberg_net: